betaPriorPosterior(alpha = 20, lambda = 10, y = sum(coin.tosses == "Heads"), n = n.tosses)
betaPriorPosterior(alpha = 20, lambda = 10, y = sum(coin.tosses == "Heads"), n = n.tosses)
betaPriorPosterior(alpha = 5, lambda = 50, y = sum(coin.tosses == "Heads"), n = n.tosses)
betaPriorPosterior(alpha = 5, lambda = 5, y = sum(coin.tosses == "Heads"), n = n.tosses)
betaPriorPosterior(alpha = 10^3, lambda = 10^3, y = sum(coin.tosses == "Heads"), n = n.tosses)
install.packages("rstan")
install.packages("ggvis")
library("ggvis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("testthat")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
colourise("abc", fg = "red")
print(colourise("abc", fg = "red"))
print(colourise("Red", "red"))
library(devtools)
install_github("jgabry/QMSS_package")
install_github("jgabry/QMSS_package")
library(QMSS)
help(package = "QMSS")
ReverseThis
install.packages("Rmetrics")
install.packages("tseries")
install.packages(c("xts", "forecast"))
sample(int(2:4, prob = c(1/3, 1/4, 5/12)))
sample(2:4, prob = c(1/3, 1/4, 5/12))
sample(2:4, prob = c(1/3, 1/4, 5/12))
sample(2:4, prob = c(1/3, 1/4, 5/12))
sample(2:4, prob = c(1/3, 1/4, 5/12))
sample.int(2:4, prob = c(1/3, 1/4, 5/12))
sample(2:4, size = 1, prob = c(1/3, 1/4, 5/12))
sample(2:4, size = 1, prob = c(1/3, 1/4, 5/12))
sample(2:4, size = 1, prob = c(1/3, 1/4, 5/12))
sample(2:4, size = 1, prob = c(1/3, 1/4, 5/12))
sample(2:4, size = 1, prob = c(1/3, 1/4, 5/12))
sample(2:4, size = 1, prob = c(1/3, 1/4, 5/12))
sample(2:4, size = 1, prob = c(1/3, 1/4, 5/12))
SIMS <- 1000
state <- mat.or.vec(SIMS)
state[1] = sample(1:4, size = 1)
for(j in 2:SIMS) {
if (state[j] == 1) {
s[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state == 2){
s[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state == 3){
s[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
if(state == 4){
s[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
}
state <- mat.or.vec(SIMS)
state <- rep(0, SIMS)
state[1] = sample(1:4, size = 1)
for(j in 2:SIMS) {
if (state[j] == 1) {
s[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state == 2){
s[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state == 3){
s[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
if(state == 4){
s[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
}
state[1] = sample(1:4, size = 1)
for(j in 2:SIMS) {
if (state[j] == 1) {
state[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state == 2){
state[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state == 3){
state[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
if(state == 4){
state[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
}
warnings
warnings()
SIMS <- 1000
state <- rep(0, SIMS)
state[1] = sample(1:4, size = 1)
j = 2
whie(j < SIMS) {
if (state[j] == 1) {
state[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state == 2){
state[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state == 3){
state[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
else {
state[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
j = j+1
}
SIMS <- 1000
state <- rep(0, SIMS)
state[1] = sample(1:4, size = 1)
j = 2
whie (j < SIMS) {
if (state[j] == 1) {
state[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state[j] == 2){
state[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state[j] == 3){
state[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
if(state[j] == 4) {
state[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
j = j+1
}
while (j < SIMS) {
if (state[j] == 1) {
state[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state[j] == 2) {
state[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state[j] == 3) {
state[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
if(state[j] == 4) {
state[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
j = j+1
}
SIMS <- 1000
state <- rep(0, SIMS)
state[1] = sample(1:4, size = 1)
j = 2
while (j < SIMS) {
if (state[j] == 1) {
state[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state[j] == 2) {
state[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state[j] == 3) {
state[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
if(state[j] == 4) {
state[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
j = j+1
}
SIMS <- 1000
state <- rep(0, SIMS)
state[1] <- sample(1:4, size = 1)
j = 1
while (j < SIMS) {
if (state[j] == 1) {
state[j+1] <- sample(c(2,3,4), size = 1, prob = c(1/3, 1/4, 5/12))
}
if (state[j] == 2) {
state[j+1] <- sample(c(1,3,4), size = 1, prob = c(1/3, 1/3, 1/3))
}
if(state[j] == 3) {
state[j+1] <- sample(c(3,4), size = 1, prob = c(1/4, 3/4))
}
if(state[j] == 4) {
state[j+1] <- sample(c(2,4), size = 1, prob = c(1/2, 1/2))
}
j = j+1
}
plot(ts(state))
qplot(state)
library(ggplot2)
qplot(state)
qplot(state, geom = "line")
ggplot(NULL, aes(x=1:j, y = state)) + geom_line()
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_line()
ggplot(NULL, aes(x=1:j, y = state, color = factor(state))) + geom_line()
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_ribbon()
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_point()
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_histogram()
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_histogram(stat="identity")
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_bar(stat="identity")
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_bar(stat="count")
ggplot(NULL, aes(x=1:j, y = state, color = state)) + geom_bar()
gplot(state)
qplot(state)
plot(ts(state))
plot(state)
barplot(state)
hist(state)
qplot(state)
qplot(state, fill = "blue")
qplot(state, color = state)
qplot(state, color = "state")
qplot(state, color = "state")
qplot(state, fill = "state")
acf(ts(state))
pnorm(3)
X <- rnorm(1000)
hist(X)
Y <- qnorm(runif(1000))
hist(Y)
plot(density(Y))
curve(density(X), add = T, col = "blue")
plot(density(X), add = T, col = "blue")
plot(density(Y))
lines(density(X), add = T, col = "blue")
X <- rpois(1000)
install.packages("Rcpp", type = "source")
SIMS <- 10000
sample(SIMS, rep = T)
sample(SIMS, 1)
transition.probabilities <- c(0, 1/3, 1/4, 5/12,
1/4, 1/4, 1/4, 1/4,
0, 0, 1/4, 3/4,
1/8, 1/8, 1/8, 5/8)
Q <- matrix(transition.probabilities, 4, 4, byrow = TRUE)
Q
rowSums(Q)
SIMS <- 100
state.space <- 1:4
chain <- rep(0, SIMS)
chain[1] <- sample(state.space, size = 1)
j = 1
while (j < SIMS) {
chain[j + 1] <- sample(state.space, size = 1, prob = Q[chain[j], ])
j <- j + 1
}
for(i in state.space){
prop <- mean(chain == i)
print(paste("Long-run proportion: State",i,"=", prop))
}
plot(NULL, xlim = c(1,4), ylim = c(0,1))
for(i in 1:SIMS){
points(chain[i], 0.5, col = colors()[sample(SIMS, 1)])
Sys.sleep(.5)
}
plot(NULL, xlim = c(1,4), ylim = c(0,1))
for(i in 1:SIMS){
points(chain[i], i/SIMS, col = colors()[sample(SIMS, 1)])
Sys.sleep(.5)
}
plot(NULL, xlim = c(1,4), ylim = c(0,1))
for(i in 1:SIMS){
points(chain[i], i/SIMS, col = colors()[sample(SIMS, 1)], pch = 20)
Sys.sleep(.5)
}
plot(NULL, xlim = c(1,4), ylim = c(0,1))
for(i in 1:SIMS){
points(chain[i], i/SIMS, col = colors()[sample(SIMS, 1)], pch = 19)
Sys.sleep(.5)
}
plot(NULL, xlim = c(1,4), ylim = c(0,1), ylab = "", xlab = "", axes = F)
for(i in 1:SIMS){
points(chain[i], i/SIMS, col = colors()[sample(SIMS, 1)], pch = 19)
Sys.sleep(.5)
}
plot(NULL, xlim = c(1,4), ylim = c(0,SIMS), ylab = "", xlab = "", axes = F)
for(i in 1:SIMS){
points(chain[i], i, col = colors()[sample(SIMS, 1)], pch = 19)
Sys.sleep(.5)
}
curve(plogis)
curve(plogis, -1, 1)
curve(plogis, -4, 4)
curve(pnorm, -4, 4)
curve(pnorm, -4, 4, col = "navyblue", lwd = 2, main = "CDF, Std Normal Dist")
curve(qnorm, 0, 1, col = "orangered", lwd = 2, main = "Inverse CDF, Std Normal Dist")
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(plogis, -4, 4, col = "navyblue", lwd = 2, add = T)
curve(pnorm, -2, 2, col = "orangered", lwd = 2)
curve(plogis, -2, 2, col = "navyblue", lwd = 2, add = T)
curve(pnorm, -8, 8, col = "orangered", lwd = 2)
curve(plogis, -8, 8, col = "navyblue", lwd = 2, add = T)
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(plogis, col = "navyblue", lwd = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = 2, col = c("orangered","navyblue"), bty="n")
plogis(0)
curve(plogis(1.7*x), add = T)
curve(pnorm(1 + x), -4,4)
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(plogis(1.7), col = "navyblue", lwd = 2, add = T)
curve(plogis(1.6*x), col = "navyblue", lwd = 2, add = T)
curve(plogis(1.7*x), col = "navyblue", lwd = 2, add = T)
curve(pnorm(x), -4, 4, col = "orangered", lwd = 2)
curve(plogis(1.7*x), col = "navyblue", lwd = 2, add = T)
curve(pnorm(x), -4, 4, col = "orangered", lwd = 2)
curve(plogis(1.7*x), col = "navyblue", lty = 2, add = T)
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(plogis, col = "navyblue", lwd = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = 2, col = c("orangered","navyblue"), bty="n")
curve(plogis(1.7*x), col = "navyblue", lty = 2, add = T)
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(plogis, col = "navyblue", lwd = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = 2, col = c("orangered","navyblue"), bty="n")
# Getting logit and probit to line up: multiply by rougly 1.7
curve(plogis(1.7*x), col = "skblue", lty = 2, add = T)
curve(plogis(1.7*x), col = "skyblue", lty = 2, add = T)
curve(plogis(1.7*x), col = "purple", lty = 2, add = T)
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(plogis, col = "navyblue", lwd = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = 2, col = c("orangered","navyblue"), bty="n")
# Getting logit and probit to line up: multiply by rougly 1.7
curve(plogis(1.7*x), col = "purple", lty = 2, add = T)
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(plogis, col = "navyblue", lwd = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = 2, col = c("orangered","navyblue"), bty="n")
# Getting logit and probit to line up: multiply by rougly 1.7
curve(plogis(1.7*x), col = "black", lty = 2, add = T)
curve(pnorm, -4, 4, col = "orangered", lwd = 2)
curve(pnorm(x), -4, 4, col = "orangered", lwd = 2)
curve(plogis(1.7*x), lty = 2, add = T)
curve(pnorm(x), -4, 4, col = "orangered", lwd = 2)
curve(plogis, col = "navyblue", lwd = 2, add = T)
curve(pnorm(x), -4, 4, col = "orangered", lwd = 2)
curve(plogis(1.7*x), col = "navyblue", lty = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = 2, lty = c(1,2), col = c("orangered","navyblue"), bty="n")
curve(pnorm(x), -4, 4, col = "orangered", lwd = 2)
curve(plogis(1.7*x), col = "navyblue", lty = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = c(2,1), lty = c(1,2), col = c("orangered","navyblue"), bty="n")
alpha <- runif(1, -100, 100) # pick any real number uniformly at random between -100 and 100
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(alpha + 1.7*beta*x), col = "navyblue", lty = 2, add = T)
curve(plogis(1.7*alpha + 1.7*beta*x), col = "navyblue", lty = 2, add = T)
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- runif(1, -100, 100)
beta <- runif(1, -100, 100)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
alpha <- rnorm(1)
beta <- rnorm(1)
print(c(alpha, beta))
curve(pnorm(alpha + beta*x), col = "orangered", lwd = 2)
curve(plogis(1.7*(alpha + beta*x)), col = "navyblue", lty = 2, add = T)
curve(pnorm(x), -4, 4, col = "orangered", lwd = 2)
curve(plogis(1.7*x), col = "navyblue", lty = 2, add = T)
legend("right", c("Probit", "Logit"), lwd = c(2,1), lty = c(1,2), col = c("orangered","navyblue"), bty="n")
setwd("/Users/jgabry/Desktop/COLUMBIA/Stuff_for_Wawro/Stan/My Code/farhang_katznelson_rep")
loadData.path <- "Data/rollcall.logit.inter.all.names.txt"
Data <- read.table(loadData.path, header = TRUE)
setwd("/Users/jgabry/Desktop/COLUMBIA/Stuff_for_Wawro/farhang_katznelson_rep")
loadData.path <- "Data/rollcall.logit.inter.all.names.txt"
Data <- read.table(loadData.path, header = TRUE)
# Load data ---------------------------------------------------------------
# _________________________________________________________________________
setwd("/Users/jgabry/Desktop/COLUMBIA/Stuff_for_Wawro/farhang_katznelson_rep")
loadData.path <- "Data/rollcall.logit.inter.all.names.txt"
Data <- read.table(loadData.path, header = TRUE)
# Construct map matrix ----------------------------------------------------
# _________________________________________________________________________
nr <- with(Data, length(unique(region)))
nc <- with(Data, length(unique(t)))
map.matrix <- mat.or.vec(nr,nc)
rownames(map.matrix) <- c("NS", "BS", "DS")
colnames(map.matrix) <- paste0("t",1:length(unique(Data$t)))
map.matrix[1, ] <- c(3, rep(5, nc - 2), 3)
map.matrix[2, ] <- c(5, rep(8, nc - 2), 5)
map.matrix[3, ] <- c(3, rep(5, nc - 2), 3)
map.matrix
# R = number of unique regions (i.e. number cells in map.matrix)
R <- prod(dim(map.matrix))
# N = total number of neighbors
N <- 3*sum(map.matrix == 3) + 5*sum(map.matrix == 5) + 8*sum(map.matrix == 8)
# just as a guide/reference: number the map cells from 1 to 24
map.index <- matrix(1:R, nr, nc)
colnames(map.index) <- colnames(map.matrix)
rownames(map.index) <- rownames(map.matrix)
map.index
# Fill in map vector to pass to Stan --------------------------------------
# _________________________________________________________________________
map <- c(2, 4, 5)               # neighbors for cell 1
map <- c(map, c(1, 3, 4, 5, 6)) # neighbors for cell 2
map <- c(map, c(2, 5, 6))       # neighbors for cell 3
# for filling in neighbors for cells 4 through 21
NS <- seq(4, 19, 3); top <- c(-2, -1, 2, 4, 5)
BS <- seq(5, 20, 3); mid <- c(-2:0, 1, 3, 4:6)
DS <- seq(6, 21, 3); bot <- c(-1, 0, 2, 5, 6)
i <- 4
while(i <= 21) {
if (i %in% NS) map <- c(map, top + 3*which(NS == i))
if (i %in% BS) map <- c(map, mid + 3*which(BS == i))
if (i %in% DS) map <- c(map, bot + 3*which(DS == i))
i <- i + 1
}
map <- c(map, c(19, 20, 23))          # neighbors for cell 22
map <- c(map, c(19, 20, 21, 22, 24))  # neighbors for cell 23
map <- c(map, c(20, 21, 23))          # neighbors for cell 24
# Prepare rest of data for Stan -------------------------------------------
# _________________________________________________________________________
# offsets vector
off <- c(0, cumsum(map.matrix))
# I = number of observations
I <- nrow(Data)
# Create region vector with possible values 1 to R (1 to 24 in this case)
# Note: region codes in data: DS = 1, BS = 2, NS, = 3
library(plyr)
Data$region.name <- mapvalues(Data$region, from = c(1:3), to = c("DS", "BS", "NS"))
region <- rep(NA, 24)
for(i in 1:8){
region[with(Data, region.name == "NS" & period == i)] <- seq(1, 22, 3)[i]
region[with(Data, region.name == "BS" & period == i)] <- seq(2, 23, 3)[i]
region[with(Data, region.name == "DS" & period == i)] <- seq(3, 24, 3)[i]
}
Nneighs <- sapply(1:R, function(r) off[r+1] - off[r]) # or equivalently Nneighs <- c(map.matrix)
data.list <- list(I = I, # number of obs
R = R, # number of regions
N = N, # length of map vector (total number of neighbors)
K = 4, # number of parameters to get instrinsic autoregressive priors
Nneighs = Nneighs,
map = map,
off = off,
region = region,
LABORCOMM = Data$laborcomm,
DEM = Data$dem,
URB = Data$urbanpct,
AA = Data$aapct,
UNION = Data$unionpop,
VOTE = Data$prolabor)
setwd("/Users/jgabry/Desktop/COLUMBIA/Stuff_for_Wawro/Github/farhang_katznelson_rep/Stan_files")
stanFile.path <- "Attempt1_experiment.stan"
PARS <- c("B", "b_DEM", "b_LABORCOMM")
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
library(parallel)
library(rstan)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
fit <- stan(file = stanFile.path, data = data.list, pars = PARS, chains = 0)
fit.test <- stan(file = stanFile.path, data = data.list, chains = 1, iter = 50, pars = PARS)
